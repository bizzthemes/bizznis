<?php
/*
	WARNING! DO NOT EDIT THIS FILE!
	This file is part of the core Bizznis parent theme. 
	Please do all modifications in the form of a child theme.
*/

/**
 * Return option from the options table and cache result.
 *
 * @since 1.0.0
 */
function bizznis_get_option( $key, $setting = null, $use_cache = true ) {
	# The default is set here, so it doesn't have to be repeated in the function arguments for bizznis_option() too.
	$setting = $setting ? $setting : BIZZNIS_SETTINGS_FIELD;
	# If we need to bypass the cache
	if ( ! $use_cache ) {
		$options = get_option( $setting );

		if ( ! is_array( $options ) || ! array_key_exists( $key, $options ) )
			return '';

		return is_array( $options[$key] ) ? stripslashes_deep( $options[$key] ) : stripslashes( wp_kses_decode_entities( $options[$key] ) );
	}
	# Setup caches
	static $settings_cache = array();
	static $options_cache  = array();
	# Allow child theme to short-circuit this function
	$pre = apply_filters( 'bizznis_pre_get_option_' . $key, null, $setting );
	if ( null !== $pre )
		return $pre;
	# Check options cache
	if ( isset( $options_cache[$setting][$key] ) )
		# Option has been cached
		return $options_cache[$setting][$key];
	# Check settings cache
	if ( isset( $settings_cache[$setting] ) )
		# Setting has been cached
		$options = apply_filters( 'bizznis_options', $settings_cache[$setting], $setting );
	else
		# Set value and cache setting
		$options = $settings_cache[$setting] = apply_filters( 'bizznis_options', get_option( $setting ), $setting );
	# Check for non-existent option
	if ( ! is_array( $options ) || ! array_key_exists( $key, (array) $options ) )
		# Cache non-existent option
		$options_cache[$setting][$key] = '';
	else
		# Option has not been previously been cached, so cache now
		$options_cache[$setting][$key] = is_array( $options[$key] ) ? stripslashes_deep( $options[$key] ) : stripslashes( wp_kses_decode_entities( $options[$key] ) );
	return $options_cache[$setting][$key];
}

/**
 * Echo options from the options database.
 *
 * @since 1.0.0
 */
function bizznis_option( $key, $setting = null, $use_cache = true ) {
	echo bizznis_get_option( $key, $setting, $use_cache );
}

/**
 * Return SEO options from the SEO options database.
 *
 * @since 1.0.0
 */
function bizznis_get_seo_option( $key, $use_cache = true ) {
	return bizznis_get_option( $key, BIZZNIS_SEO_SETTINGS_FIELD, $use_cache );
}

/**
 * Echo an SEO option from the SEO options database.
 *
 * @since 1.0.0
 */
function bizznis_seo_option( $key, $use_cache = true ) {
	bizznis_option( $key, BIZZNIS_SEO_SETTINGS_FIELD, $use_cache );
}

/**
 * Return a CPT Archive setting value from the options table.
 *
 * @since 1.0.0
 */
function bizznis_get_cpt_option( $key, $post_type_name = '', $use_cache = true ) {
	$post_type_name = bizznis_get_global_post_type_name( $post_type_name );
	return bizznis_get_option( $key, BIZZNIS_CPT_ARCHIVE_SETTINGS_FIELD_PREFIX . $post_type_name, $use_cache );
}

/**
 * Echo a CPT Archive option from the options table.
 *
 * @since 1.0.0
 */
function bizznis_cpt_option( $key, $post_type_name, $use_cache = true ) {
	echo bizznis_get_cpt_option( $key, $post_type_name, $use_cache );
}

/**
 * Echo data from a post or page custom field.
 *
 * @since 1.0.0
 */
function bizznis_custom_field( $field, $output_pattern = '%s' ) {
	printf( $output_pattern, bizznis_get_custom_field( $field ) );
}

/**
 * Return custom field post meta data.
 *
 * @since 1.0.0
 */
function bizznis_get_custom_field( $field ) {
	if ( null === get_the_ID() )
		return '';
	$custom_field = get_post_meta( get_the_ID(), $field, true );
	if ( ! $custom_field )
		return '';
	# Return custom field, slashes stripped, sanitized if string
	return is_array( $custom_field ) ? stripslashes_deep( $custom_field ) : stripslashes( wp_kses_decode_entities( $custom_field ) );
}

/**
 * Save post meta / custom field data for a post or page.
 *
 * @since 1.0.0
 */
function bizznis_save_custom_fields( array $data, $nonce_action, $nonce_name, $post, $post_id ) {
	# Verify the nonce
	if ( ! isset( $_POST[ $nonce_name ] ) || ! wp_verify_nonce( $_POST[ $nonce_name ], $nonce_action ) )
		return;
	# Don't try to save the data under autosave, ajax, or future post.
	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
		return;
	if ( defined( 'DOING_AJAX' ) && DOING_AJAX )
		return;
	if ( defined( 'DOING_CRON' ) && DOING_CRON )
		return;
	# Don't save if WP is creating a revision (same as DOING_AUTOSAVE?)
	if ( 'revision' == $post->post_type )
		return;
	# Check that the user is allowed to edit the post
	if ( ! current_user_can( 'edit_post', $post->ID ) )
		return;
	# Cycle through $data, insert value or delete field
	foreach ( (array) $data as $field => $value ) {
		# Save $value, or delete if the $value is empty
		if ( $value )
			update_post_meta( $post_id, $field, $value );
		else
			delete_post_meta( $post_id, $field );
	}
}

/**
 * Merge term meta data into options table.
 *
 * @since 1.0.0
 */
add_filter( 'get_term', 'bizznis_get_term_filter', 10, 2 ); #wp
function bizznis_get_term_filter( $term, $taxonomy ) {
	# Stop here, if $term is not object
	if ( ! is_object( $term ) )
		return $term;
	$db = get_option( 'bizznis-term-meta' );
	$term_meta = isset( $db[$term->term_id] ) ? $db[$term->term_id] : array();
	$term->meta = wp_parse_args( $term_meta, apply_filters( 'bizznis_term_meta_defaults', array(
		'headline'            => '',
		'intro_text'          => '',
		'display_title'       => 0, //* vestigial
		'display_description' => 0, //* vestigial
		'doctitle'            => '',
		'description'         => '',
		'layout'              => '',
		'noindex'             => 0,
		'nofollow'            => 0,
		'noarchive'           => 0,
	) ) );
	# Sanitize term meta
	foreach ( $term->meta as $field => $value )
		$term->meta[$field] = apply_filters( 'bizznis_term_meta_' . $field, stripslashes( wp_kses_decode_entities( $value ) ), $term, $taxonomy );
	$term->meta = apply_filters( 'bizznis_term_meta', $term->meta, $term, $taxonomy );
	return $term;
}

/**
 * Add Bizznis term-meta data to functions that return multiple terms.
 *
 * @since 1.0.0
 */
add_filter( 'get_terms', 'bizznis_get_terms_filter', 10, 2 ); #wp
function bizznis_get_terms_filter( array $terms, $taxonomy ) {
	foreach( $terms as $term )
		$term = bizznis_get_term_filter( $term, $taxonomy );
	return $terms;
}

/**
 * Takes an array of new settings, merges them with the old settings,
 * and pushes them into the database.
 *
 * @since 1.0.0
 */
function _bizznis_update_settings( $new = '', $setting = BIZZNIS_SETTINGS_FIELD ) {
	update_option( $setting, wp_parse_args( $new, get_option( $setting ) ) );
}
